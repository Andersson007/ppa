---
name: ansible-base
on:
  push:
    branches:
      - ansible-2.10
    paths:
      - .github/workflows/ansible-base.yml
jobs:
  build_ansible_base:
    name: Build ansible-base
    runs-on: ubuntu-20.04
    steps:
      - name: setup
        env:
          DPUT_CF: ${{ secrets.DPUT_CF }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_OWNERTRUST: ${{ secrets.SIGNING_OWNERTRUST }}
        run: |
          sudo apt -y remove ansible || true
          sudo apt -y remove ansible-base || true
          sudo apt -y remove ansible-core || true
          sudo apt -y autoremove

          sudo apt -y install wget gpg gpg-agent

          echo "${DPUT_CF}" > "${HOME}"/.dput.cf
          echo "${SIGNING_KEY}" > "${HOME}"/signing.key
          echo "${SIGNING_PASSPHRASE}" > "${HOME}"/signing.passphrase
          echo "${SIGNING_OWNERTRUST}" > "${HOME}"/signing.ownertrust

          gpg --import --batch --pinentry-mode loopback --passphrase-file "${HOME}"/signing.passphrase "${HOME}"/signing.key
          gpg --import-ownertrust --batch --pinentry-mode loopback --passphrase-file "${HOME}"/signing.passphrase "${HOME}"/signing.ownertrust

      - name: checkout branch
        uses: actions/checkout@v2
        with:
          ref: ansible-2.10

      - name: build
        env:
          DEB_NAME: ansible-base
          DEB_VERSION: 2.10.11
          DEB_RELEASE: 1ppa
          DEB_DIST: hirsute groovy focal bionic
          DEB_PPA: ansible-2.10
          DEBSIGN_KEYID: ${{ secrets.DEBSIGN_KEYID }}
          DEBSIGN_PROGRAM: gpg --pinentry-mode loopback --passphrase-file ${HOME}/signing.passphrase
          OFFICIAL: yes
          TARBALL_BASE_URL: https://pypi.python.org/packages/source
        run: |
          # handle different release types better in the changelog
          DEB_VERSION_EXTRA=$(echo "${DEB_VERSION}" | grep -Po '[a-z]+.*' || true)

          if [[ -n "${DEB_VERSION_EXTRA}" ]]; then
            DEB_VERSION_BASE=$(echo "${DEB_VERSION}" | grep -Po '^[\d+\.]+')
            export DEB_CHANGELOG_VERSION="${DEB_VERSION_BASE}"~"${DEB_VERSION_EXTRA}"
          else
            export DEB_CHANGELOG_VERSION="${DEB_VERSION}"
          fi

          sudo apt -y install make python python-packaging python-setuptools python3-straight.plugin python3-jinja2 python3-yaml python3-docutils devscripts cdbs debhelper dh-python python3-setuptools python3-packaging

          mkdir -p "${HOME}"/"${DEB_NAME}" && cd "$_" || exit
          rm -rf "${DEB_NAME}"-"${DEB_VERSION}"*
          wget "${TARBALL_BASE_URL}"/"${DEB_NAME:0:1}"/"${DEB_NAME}"/"${DEB_NAME}"-"${DEB_VERSION}".tar.gz
          tar -xzf "${DEB_NAME}"-"${DEB_VERSION}".tar.gz
          cd "${DEB_NAME}"-"${DEB_VERSION}" || exit

          # add DEBSIGN_PROGRAM option for non-interactive signing
          sed -Ei 's/(\s+DEBUILD_OPTS \+= -k\$\(DEBSIGN_KEYID\))$/\1 -p"$(DEBSIGN_PROGRAM)"/g' Makefile

          # overwrite debian files using this repo's files
          cp -a "${HOME}"/work/ppa/ppa/"${DEB_NAME}"/debian/* packaging/debian/

          time DEB_VERSION="${DEB_CHANGELOG_VERSION}" make deb-src-upload
